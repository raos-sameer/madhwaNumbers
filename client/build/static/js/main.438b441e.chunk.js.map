{"version":3,"sources":["DetailedPage.js","AppMenu.js","HomePage.js","GamesPage.js","App.js","serviceWorker.js","index.js"],"names":["DetailedPage","props","console","log","useState","activeTab","setActiveTab","toggle","tab","className","Row","Col","sm","size","offset","ListGroup","displayList","showDetails","showAnswer","map","category","index","Nav","tabs","NavItem","NavLink","classnames","active","JSON","stringify","onClick","title","TabContent","TabPane","tabId","subCategory","eachSubCategory","Alert","color","itemName","AppMenu","state","Navbar","dark","expand","NavbarBrand","href","navbar","Component","HomePage","questionList","answer","isLoading","componentDidMount","getQuestionList","length","faq","ListGroupItem","key","data-id","code","tag","bind","question","event","preventDefault","currentTarget","dataset","id","setState","getAnswer","fetch","response","json","body","this","React","GamesPage","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.438b441e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  ListGroup,\r\n  Alert,\r\n  Container,\r\n  TabContent,\r\n  TabPane,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  Row,\r\n  Col,\r\n} from \"reactstrap\";\r\nimport classnames from \"classnames\";\r\nimport \"./App.css\";\r\nconst DetailedPage = (props) => {\r\n  console.log(\"Props::\", props);\r\n  const showAnswer = () => {\r\n    console.log(\"answer\", props.showAnswer);\r\n    const answer = props.showAnswer;\r\n    return answer.map((category, index) => (\r\n      <div>\r\n        <Nav tabs>\r\n          <NavItem>\r\n            <NavLink\r\n              className={classnames({\r\n                active: activeTab === JSON.stringify(index),\r\n              })}\r\n              onClick={() => {\r\n                toggle(JSON.stringify(index));\r\n              }}\r\n            >\r\n              {category.title}\r\n            </NavLink>\r\n          </NavItem>\r\n        </Nav>\r\n        <TabContent activeTab={activeTab}>\r\n          <TabPane tabId={JSON.stringify(index)}>\r\n            <Row>\r\n              <Col sm=\"12\">\r\n                {category.subCategory.map((eachSubCategory, index) => (\r\n                  <div className=\"SubCategory\">\r\n                    <Alert color=\"primary\">{eachSubCategory.itemName}</Alert>\r\n                  </div>\r\n                ))}\r\n              </Col>\r\n            </Row>\r\n          </TabPane>\r\n        </TabContent>\r\n      </div>\r\n    ));\r\n  };\r\n  const [activeTab, setActiveTab] = useState(\"1\");\r\n\r\n  const toggle = (tab) => {\r\n    if (activeTab !== tab) setActiveTab(tab);\r\n  };\r\n  return (\r\n    <div className=\"app\">\r\n      <Row>\r\n        <Col sm={{ size: \"auto\", offset: 1 }}>\r\n          <ListGroup>{props.displayList}</ListGroup>\r\n        </Col>\r\n\r\n        {props.showDetails && showAnswer()}\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DetailedPage;\r\n","import React, { Component } from \"react\";\r\nimport { Navbar, NavbarBrand, Nav, NavItem, NavLink } from \"reactstrap\";\r\nclass AppMenu extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar color=\"dark\" dark expand=\"md\">\r\n          <NavbarBrand href=\"/\">Tatwa Information</NavbarBrand>\r\n\r\n          <Nav className=\"ml-auto\" navbar>\r\n            <NavItem>\r\n              <NavLink href=\"/\">Home</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href=\"/games\">Games</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href=\"/others\">Other Information</NavLink>\r\n            </NavItem>\r\n          </Nav>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppMenu;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { ListGroupItem } from \"reactstrap\";\r\nimport DetailedPage from \"./DetailedPage\";\r\nimport \"./App.css\";\r\n\r\nimport AppMenu from \"./AppMenu\";\r\n\r\nclass HomePage extends React.Component {\r\n  state = {\r\n    questionList: [],\r\n    answer: [],\r\n    isLoading: true,\r\n    showDetails: false,\r\n  };\r\n  componentDidMount = () => {\r\n    this.getQuestionList();\r\n  };\r\n\r\n  async getQuestionList() {\r\n    const response = await fetch(\"http://localhost:8080/api/faqQuestionList\");\r\n    const body = await response.json();\r\n\r\n    this.setState({\r\n      questionList: body,\r\n      isLoading: false,\r\n    });\r\n  }\r\n\r\n  displayList = (questionList) => {\r\n    if (questionList.length < 1) return null;\r\n\r\n    return questionList.map((faq, index) => (\r\n      <div className=\"faq_blocks\">\r\n        <ListGroupItem\r\n          key={index}\r\n          data-id={faq.code}\r\n          color=\"success\"\r\n          tag=\"a\"\r\n          href=\"\"\r\n          onClick={this.showDetails.bind(this)}\r\n        >\r\n          {faq.question}\r\n        </ListGroupItem>\r\n      </div>\r\n    ));\r\n  };\r\n  showDetails = (event) => {\r\n    event.preventDefault();\r\n    const code = event.currentTarget.dataset.id;\r\n    this.setState({\r\n      isLoading: true,\r\n    });\r\n    this.getAnswer(code);\r\n  };\r\n  async getAnswer(code) {\r\n    const response = await fetch(\r\n      \"http://localhost:8080/api/faqSpecificAnswer?code=\" + code\r\n    );\r\n    const body = await response.json();\r\n\r\n    this.setState({\r\n      questionList: body,\r\n      isLoading: false,\r\n      showDetails: true,\r\n      answer: body[0] && body[0].category,\r\n    });\r\n\r\n    //this.showAnswer();\r\n  }\r\n\r\n  render() {\r\n    const { isLoading, questionList, showDetails, answer } = this.state;\r\n    if (isLoading) {\r\n      return <div> Loading....</div>;\r\n    }\r\n    return (\r\n      <div>\r\n        <AppMenu></AppMenu>\r\n        <p />\r\n        <DetailedPage\r\n          displayList={this.displayList(questionList)}\r\n          showDetails={showDetails}\r\n          showAnswer={answer}\r\n        ></DetailedPage>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HomePage;\r\n","import React, { useState } from \"react\";\r\nimport AppMenu from \"./AppMenu\";\r\nconst GamesPage = (props) => {\r\n  return (\r\n    <div>\r\n      <AppMenu></AppMenu>\r\n      <h3>Coming Soon</h3>\r\n    </div>\r\n  );\r\n};\r\nexport default GamesPage;\r\n","import React from \"react\";\nimport HomePage from \"./HomePage\";\nimport DetailedPage from \"./DetailedPage\";\nimport GamesPage from \"./GamesPage\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Router>\n          <Switch>\n            <Route path=\"/\" exact={true} component={HomePage} />\n            <Route path=\"/detail\" exact={true} component={DetailedPage} />\n            <Route path=\"/games\" exact={true} component={GamesPage} />\n            <Route path=\"/others\" exact={true} component={GamesPage} />\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}