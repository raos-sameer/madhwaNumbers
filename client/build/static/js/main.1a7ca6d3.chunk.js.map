{"version":3,"sources":["landing/DetailedPage.js","common/AppMenu.js","landing/HomePage.js","games/GamesPage.js","App.js","serviceWorker.js","index.js"],"names":["DetailedPage","props","state","showAnswerDetails","subCategory","handleClick","category","console","log","document","getElementById","hidden","innerHTML","title","map","eachSubCategory","itemName","useState","className","Row","Col","sm","size","offset","ListGroup","displayList","showDetails","showAnswer","index","href","key","value","onClick","event","preventDefault","id","AppMenu","Navbar","color","dark","expand","NavbarBrand","Nav","navbar","NavItem","NavLink","Component","HomePage","questionList","answer","isLoading","componentDidMount","getQuestionList","length","faq","ListGroupItem","data-id","code","tag","bind","question","currentTarget","dataset","setState","getAnswer","fetch","response","json","body","this","React","GamesPage","questionAnswer","duplicateQuestionAnswer","openedCards","previouslyOpenedCard","buttonColor","clues","eachClue","push","random","nums","ranNums","i","j","Math","floor","splice","displayMatrix","me","Button","changeBtnText","split","App","path","exact","component","OtherPage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1a7ca6d3.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { ListGroup, Row, Col } from \"reactstrap\";\r\nimport \"../App.css\";\r\nconst DetailedPage = (props) => {\r\n  const state = {\r\n    showAnswerDetails: true,\r\n    subCategory: [],\r\n  };\r\n  const showAnswer = () => {\r\n    console.log(\"answer\", props.showAnswer);\r\n    const answer = props.showAnswer;\r\n    //state.showAnswerDetails = false;\r\n    return answer.map((category, index) => (\r\n      <a\r\n        href=\"\"\r\n        key={index}\r\n        value={category.title}\r\n        onClick={(event) => {\r\n          event.preventDefault();\r\n          handleClick(category);\r\n        }}\r\n      >\r\n        {category.title}\r\n      </a>\r\n    ));\r\n  };\r\n  const handleClick = (category) => {\r\n    state.showAnswerDetails = false;\r\n    console.log(category);\r\n    document.getElementById(\"DetailedAnswer\").hidden = false;\r\n    document.getElementById(\"DetailedAnswerTitle\").hidden = false;\r\n    document.getElementById(\"DetailedAnswerTitle\").innerHTML =\r\n      \"<div><p/><h1>\" + category.title + \"</h1></div>\";\r\n    document.getElementById(\r\n      \"DetailedAnswer\"\r\n    ).innerHTML = category.subCategory.map(\r\n      (eachSubCategory) =>\r\n        '<div className=\"detailed\"><p/><h3>' +\r\n        eachSubCategory.itemName +\r\n        \"</h3><br/></div>\"\r\n    );\r\n  };\r\n  const [activeTab, setActiveTab] = useState(\"1\");\r\n\r\n  const toggle = (tab) => {\r\n    if (activeTab !== tab) setActiveTab(tab);\r\n  };\r\n  return (\r\n    <div className=\"app\">\r\n      <Row>\r\n        <Col sm={{ size: \"auto\", offset: 1 }}>\r\n          <ListGroup>{props.displayList}</ListGroup>\r\n        </Col>\r\n        <div className=\"scrollmenu\">{props.showDetails && showAnswer()}</div>\r\n        <div\r\n          id=\"DetailedAnswerTitle\"\r\n          className=\"detailedTitle\"\r\n          hidden={state.showAnswerDetails}\r\n        ></div>\r\n        <div\r\n          id=\"DetailedAnswer\"\r\n          className=\"detailed\"\r\n          hidden={state.showAnswerDetails}\r\n        ></div>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DetailedPage;\r\n","import React, { Component } from \"react\";\r\nimport { Navbar, NavbarBrand, Nav, NavItem, NavLink } from \"reactstrap\";\r\nclass AppMenu extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar color=\"dark\" dark expand=\"md\">\r\n          <NavbarBrand href=\"/\">Tatwa Information</NavbarBrand>\r\n\r\n          <Nav className=\"ml-auto\" navbar>\r\n            <NavItem>\r\n              <NavLink href=\"/\">Home</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href=\"/games\">Games</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href=\"/others\">Other Information</NavLink>\r\n            </NavItem>\r\n          </Nav>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppMenu;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { ListGroupItem } from \"reactstrap\";\r\nimport DetailedPage from \"./DetailedPage\";\r\nimport \"../App.css\";\r\n\r\nimport AppMenu from \"../common/AppMenu\";\r\n\r\nclass HomePage extends React.Component {\r\n  state = {\r\n    questionList: [],\r\n    answer: [],\r\n    isLoading: true,\r\n    showDetails: false,\r\n  };\r\n  componentDidMount = () => {\r\n    this.getQuestionList();\r\n  };\r\n\r\n  async getQuestionList() {\r\n    const response = await fetch(\"/api/faqQuestionList\");\r\n    const body = await response.json();\r\n\r\n    this.setState({\r\n      questionList: body,\r\n      isLoading: false,\r\n    });\r\n  }\r\n\r\n  displayList = (questionList) => {\r\n    if (questionList.length < 1) return null;\r\n\r\n    return questionList.map((faq, index) => (\r\n      <div key={index} className=\"faq_blocks\">\r\n        <ListGroupItem\r\n          key={index}\r\n          data-id={faq.code}\r\n          color=\"success\"\r\n          tag=\"a\"\r\n          href=\"\"\r\n          onClick={this.showDetails.bind(this)}\r\n        >\r\n          {faq.question}\r\n        </ListGroupItem>\r\n      </div>\r\n    ));\r\n  };\r\n  showDetails = (event) => {\r\n    event.preventDefault();\r\n    const code = event.currentTarget.dataset.id;\r\n    this.setState({\r\n      isLoading: true,\r\n    });\r\n    this.getAnswer(code);\r\n  };\r\n  async getAnswer(code) {\r\n    const response = await fetch(\"/api/faqSpecificAnswer?code=\" + code);\r\n    const body = await response.json();\r\n\r\n    this.setState({\r\n      questionList: body,\r\n      isLoading: false,\r\n      showDetails: true,\r\n      answer: body[0] && body[0].category,\r\n    });\r\n\r\n    //this.showAnswer();\r\n  }\r\n\r\n  render() {\r\n    const { isLoading, questionList, showDetails, answer } = this.state;\r\n    if (isLoading) {\r\n      return <div> Loading....</div>;\r\n    }\r\n    return (\r\n      <div>\r\n        <AppMenu></AppMenu>\r\n        <p />\r\n        <DetailedPage\r\n          displayList={this.displayList(questionList)}\r\n          showDetails={showDetails}\r\n          showAnswer={answer}\r\n          questionList={questionList}\r\n          showAnswerDetails={false}\r\n        ></DetailedPage>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HomePage;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport \"../App.css\";\r\nimport { Button } from \"reactstrap\";\r\nimport AppMenu from \"../common/AppMenu\";\r\n\r\nclass GamesPage extends React.Component {\r\n  state = {\r\n    questionAnswer: [],\r\n    duplicateQuestionAnswer: [],\r\n    openedCards: 0,\r\n    previouslyOpenedCard: -1,\r\n    buttonColor: \"info\",\r\n  };\r\n  componentDidMount = () => {\r\n    const mapping = [\r\n      {\r\n        question: [\"Who is Ashwatthama\", \"Who is Shuka\"],\r\n        answer: \"Rudra\",\r\n      },\r\n      {\r\n        question: [\"Bheema\", \"Hanuma\"],\r\n        answer: \"Vaayu\",\r\n      },\r\n      {\r\n        question: [\"Who Killed Meghadoot Asur\", \"Sumitra's brother\"],\r\n        answer: \"Lakshman\",\r\n      },\r\n      {\r\n        question: [\"Poorvashrama Name Vasudeva\", \"Paajaka\"],\r\n        answer: \"Madhwacharya\",\r\n      },\r\n      {\r\n        question: [\"Son of Satyavati Devi\", \"Veda vibhaaga Kartru\"],\r\n        answer: \"Vedavyaas\",\r\n      },\r\n    ];\r\n    let questionAnswer = [];\r\n    const duplicateQuestionAnswer = [];\r\n    const color = [];\r\n    mapping.map((clues, index) =>\r\n      clues.question.map(\r\n        (eachClue) => (\r\n          questionAnswer.push(eachClue + \";\" + clues.answer),\r\n          duplicateQuestionAnswer.push(\"Find Match\"),\r\n          color.push(\"info\")\r\n        )\r\n      )\r\n    );\r\n    questionAnswer = this.random(questionAnswer);\r\n    this.setState({\r\n      questionAnswer: questionAnswer,\r\n      duplicateQuestionAnswer: duplicateQuestionAnswer,\r\n      buttonColor: color,\r\n    });\r\n  };\r\n  random = (nums) => {\r\n    var ranNums = [],\r\n      i = nums.length,\r\n      j = 0;\r\n    while (i--) {\r\n      j = Math.floor(Math.random() * (i + 1));\r\n      ranNums.push(nums[j]);\r\n      nums.splice(j, 1);\r\n    }\r\n    console.log(ranNums);\r\n    return ranNums;\r\n  };\r\n  displayMatrix = () => {\r\n    const { duplicateQuestionAnswer, buttonColor } = this.state;\r\n    const me = this;\r\n    return duplicateQuestionAnswer.map((question, index) => (\r\n      <div>\r\n        <Button\r\n          color={buttonColor[index]}\r\n          key={index}\r\n          value={index}\r\n          onClick={(event) => {\r\n            event.preventDefault();\r\n            me.changeBtnText(index);\r\n          }}\r\n        >\r\n          {question}\r\n        </Button>\r\n        <p />\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  changeBtnText = (index) => {\r\n    let {\r\n      duplicateQuestionAnswer,\r\n      questionAnswer,\r\n      openedCards,\r\n      previouslyOpenedCard,\r\n      buttonColor,\r\n    } = this.state;\r\n    buttonColor[index] = \"warning\";\r\n    if (openedCards === 1) {\r\n      openedCards = 0;\r\n      if (\r\n        questionAnswer[index].split(\";\")[1] ===\r\n        questionAnswer[previouslyOpenedCard].split(\";\")[1]\r\n      ) {\r\n        buttonColor[index] = \"success\";\r\n        buttonColor[previouslyOpenedCard] = \"success\";\r\n        duplicateQuestionAnswer[index] = questionAnswer[index];\r\n        duplicateQuestionAnswer[previouslyOpenedCard] =\r\n          questionAnswer[previouslyOpenedCard];\r\n      } else {\r\n        duplicateQuestionAnswer[index] = \"Find Match\";\r\n        duplicateQuestionAnswer[previouslyOpenedCard] = \"Find Match\";\r\n        buttonColor[index] = \"info\";\r\n        buttonColor[previouslyOpenedCard] = \"info\";\r\n      }\r\n    } else {\r\n      openedCards++;\r\n      duplicateQuestionAnswer[index] = questionAnswer[index].split(\";\")[0];\r\n    }\r\n\r\n    this.setState({\r\n      duplicateQuestionAnswer: duplicateQuestionAnswer,\r\n      previouslyOpenedCard: index,\r\n      openedCards: openedCards,\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <AppMenu></AppMenu>\r\n        {this.displayMatrix()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GamesPage;\r\n","import React from \"react\";\nimport HomePage from \"./landing/HomePage\";\nimport DetailedPage from \"./landing/DetailedPage\";\nimport GamesPage from \"./games/GamesPage\";\nimport OtherPage from \"./OtherPage\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Router>\n          <Switch>\n            <Route path=\"/\" exact={true} component={HomePage} />\n            <Route path=\"/detail\" exact={true} component={DetailedPage} />\n            <Route path=\"/games\" exact={true} component={GamesPage} />\n            <Route path=\"/others\" exact={true} component={OtherPage} />\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}