{"version":3,"sources":["AppMenu.js","DetailedPage.js","HomePage.js","App.js","serviceWorker.js","index.js"],"names":["AppMenu","state","Navbar","color","dark","expand","NavbarBrand","href","Nav","className","navbar","NavItem","NavLink","Component","DetailedPage","props","console","log","ListGroup","ListGroupItem","a","HomePage","list","isLoading","displayList","questionList","length","map","faq","index","tag","question","redirectPage","event","preventDefault","target","componentDidMount","getQuestionList","fetch","response","json","body","this","setState","Button","key","code","value","size","block","onClick","bind","React","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+UA2BeA,E,4MAxBbC,MAAQ,G,uDAEN,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,MAAM,OAAOC,MAAI,EAACC,OAAO,MAC/B,kBAACC,EAAA,EAAD,CAAaC,KAAK,KAAlB,+BAEA,kBAACC,EAAA,EAAD,CAAKC,UAAU,UAAUC,QAAM,GAC7B,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASL,KAAK,KAAd,SAEF,kBAACI,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASL,KAAK,eAAd,eAEF,kBAACI,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASL,KAAK,aAAd,oB,GAhBQM,aCkBPC,EAhBM,SAACC,GAEpB,OADAC,QAAQC,IAAI,UAAWF,GAErB,6BACE,kBAAC,EAAD,MACA,4BACA,wCACA,kBAACG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAehB,MAAM,UAAUiB,GAAC,EAACb,KAAK,WAAtC,sBC2DOc,E,4MA/DbpB,MAAQ,CACNqB,KAAM,GACNC,WAAW,G,EAWbC,YAAc,SAACC,GACb,OAAIA,EAAaC,OAAe,MAEhCV,QAAQC,IAAI,gBAAiBQ,GACtBA,EAAaE,KAAI,SAACC,EAAKC,GAAN,OACtB,6BACE,kBAACV,EAAA,EAAD,CAAehB,MAAM,UAAU2B,IAAI,IAAIvB,KAAK,WACzCqB,EAAIG,gB,EAKbC,aAAe,SAACC,GAGd,OAFAA,EAAMC,iBACNlB,QAAQC,IAAIgB,EAAME,QACX,gD,EAETC,kBAAoB,WAClB,EAAKC,mB,kMAzBkBC,MAAM,wB,cAAvBC,E,gBACaA,EAASC,O,OAAtBC,E,OACNC,KAAKC,SAAS,CACZrB,KAAMmB,EACNlB,WAAW,I,qIAuBL,IAAD,SACqBmB,KAAKzC,MAAzBsB,EADD,EACCA,UAAWD,EADZ,EACYA,KACnB,OAAIC,EACK,8CAETP,QAAQC,IAAIK,GAEV,6BACE,kBAAC,EAAD,MACA,4BACA,wCACA,kBAACJ,EAAA,EAAD,KACGI,EAAKK,KAAI,SAACC,GAAD,OACR,kBAACgB,EAAA,EAAD,CACEC,IAAKjB,EAAIkB,KACTC,MAAOnB,EAAIkB,KACX3C,MAAM,UACN6C,KAAK,KACLC,OAAK,EACLC,QAAS,EAAKlB,aAAamB,KAAK,IAE/BvB,EAAIG,oB,GAvDIqB,IAAMvC,W,eCYdwC,E,uKAbX,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,UAAWnC,IACxC,kBAAC,IAAD,CAAOiC,KAAK,UAAUC,OAAO,EAAMC,UAAW1C,W,GAPxCsC,IAAMvC,WCQJ4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1D,QAAQ0D,MAAMA,EAAMC,c","file":"static/js/main.045b0eda.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Navbar, NavbarBrand, Nav, NavItem, NavLink } from \"reactstrap\";\r\nclass AppMenu extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar color=\"dark\" dark expand=\"md\">\r\n          <NavbarBrand href=\"/\">Expense Tracker Application</NavbarBrand>\r\n\r\n          <Nav className=\"ml-auto\" navbar>\r\n            <NavItem>\r\n              <NavLink href=\"/\">Home</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href=\"/categories\">Categories</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href=\"/expenses\">Expenses</NavLink>\r\n            </NavItem>\r\n          </Nav>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppMenu;\r\n","import React from \"react\";\r\nimport { ListGroup, ListGroupItem } from \"reactstrap\";\r\n\r\nimport AppMenu from \"./AppMenu\";\r\nconst DetailedPage = (props) => {\r\n  console.log(\"Props::\", props);\r\n  return (\r\n    <div>\r\n      <AppMenu></AppMenu>\r\n      <p />\r\n      <h3>Buttons </h3>\r\n      <ListGroup>\r\n        <ListGroupItem color=\"success\" a href=\"/detail\">\r\n          Cras justo odio\r\n        </ListGroupItem>\r\n      </ListGroup>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DetailedPage;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { ListGroup, ListGroupItem, Button } from \"reactstrap\";\r\nimport DetailedPage from \"./DetailedPage\";\r\n\r\nimport AppMenu from \"./AppMenu\";\r\n\r\nclass HomePage extends React.Component {\r\n  state = {\r\n    list: [],\r\n    isLoading: true,\r\n  };\r\n\r\n  async getQuestionList() {\r\n    const response = await fetch(\"/api/faqQuestionList\");\r\n    const body = await response.json();\r\n    this.setState({\r\n      list: body,\r\n      isLoading: false,\r\n    });\r\n  }\r\n  displayList = (questionList) => {\r\n    if (questionList.length) return null;\r\n\r\n    console.log(\"questionList:\", questionList);\r\n    return questionList.map((faq, index) => (\r\n      <div>\r\n        <ListGroupItem color=\"success\" tag=\"a\" href=\"/detail\">\r\n          {faq.question}\r\n        </ListGroupItem>\r\n      </div>\r\n    ));\r\n  };\r\n  redirectPage = (event) => {\r\n    event.preventDefault();\r\n    console.log(event.target);\r\n    return <div>Sameer is here</div>;\r\n  };\r\n  componentDidMount = () => {\r\n    this.getQuestionList();\r\n  };\r\n  render() {\r\n    const { isLoading, list } = this.state;\r\n    if (isLoading) {\r\n      return <div> Loading....</div>;\r\n    }\r\n    console.log(list);\r\n    return (\r\n      <div>\r\n        <AppMenu></AppMenu>\r\n        <p />\r\n        <h3>Buttons </h3>\r\n        <ListGroup>\r\n          {list.map((faq) => (\r\n            <Button\r\n              key={faq.code}\r\n              value={faq.code}\r\n              color=\"primary\"\r\n              size=\"lg\"\r\n              block\r\n              onClick={this.redirectPage.bind(this)}\r\n            >\r\n              {faq.question}\r\n            </Button>\r\n          ))}\r\n        </ListGroup>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HomePage;\r\n","import React from \"react\";\nimport HomePage from \"./HomePage\";\nimport DetailedPage from \"./DetailedPage\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Router>\n          <Switch>\n            <Route path=\"/\" exact={true} component={HomePage} />\n            <Route path=\"/detail\" exact={true} component={DetailedPage} />\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}